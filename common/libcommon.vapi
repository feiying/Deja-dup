/* libcommon.vapi generated by valac-0.16 0.16.1, do not modify. */

namespace DejaDup {
	[CCode (cheader_filename = "common.h")]
	public abstract class Backend : GLib.Object {
		public static uint64 INFINITE_SPACE;
		public Backend ();
		public virtual void add_argv (DejaDup.ToolJob.Mode mode, ref GLib.List<string> argv);
		public abstract DejaDup.Backend clone ();
		public static DejaDup.Backend? get_default ();
		public static string get_default_type ();
		public virtual async void get_envp () throws GLib.Error;
		public virtual GLib.Icon? get_icon ();
		public abstract string get_location (ref bool as_root);
		public abstract string get_location_pretty ();
		public virtual async uint64 get_space (bool free = true);
		public abstract bool is_native ();
		public virtual async bool is_ready (out string when);
		public virtual bool space_can_be_infinite ();
		public GLib.MountOperation mount_op { get; set; }
		public signal void envp_ready (bool success, GLib.List<string>? envp, string? error = null);
		public signal void pause_op (string? header, string? msg);
	}
	[CCode (cheader_filename = "common.h")]
	public class BackendAuto : DejaDup.Backend {
		public BackendAuto ();
		public override DejaDup.Backend clone ();
		public override GLib.Icon? get_icon ();
		public override string get_location (ref bool as_root);
		public override string get_location_pretty ();
		public override bool is_native ();
		public override async bool is_ready (out string when);
	}
	[CCode (cheader_filename = "common.h")]
	public class BackendFile : DejaDup.Backend {
		public BackendFile ();
		public override void add_argv (DejaDup.ToolJob.Mode mode, ref GLib.List<string> argv);
		public static async void check_for_volume_info (GLib.File file) throws GLib.Error;
		public override DejaDup.Backend clone ();
		public static GLib.Volume? find_volume_by_uuid (string uuid);
		public override async void get_envp () throws GLib.Error;
		public override GLib.Icon? get_icon ();
		public override string get_location (ref bool as_root);
		public override string get_location_pretty ();
		public override async uint64 get_space (bool free = true);
		public override bool is_native ();
		public override async bool is_ready (out string when);
		public static async void set_volume_info (GLib.Volume volume, string? relpath = null);
		public override bool space_can_be_infinite ();
	}
	[CCode (cheader_filename = "common.h")]
	public class BackendRackspace : DejaDup.Backend {
		public BackendRackspace ();
		public override DejaDup.Backend clone ();
		public static DejaDup.Checker get_checker ();
		public override async void get_envp () throws GLib.Error;
		public override GLib.Icon? get_icon ();
		public override string get_location (ref bool as_root);
		public override string get_location_pretty ();
		public override bool is_native ();
		public override async bool is_ready (out string when);
	}
	[CCode (cheader_filename = "common.h")]
	public class BackendS3 : DejaDup.Backend {
		public BackendS3 ();
		public override void add_argv (DejaDup.ToolJob.Mode mode, ref GLib.List<string> argv);
		public bool bump_bucket ();
		public override DejaDup.Backend clone ();
		public static DejaDup.Checker get_checker ();
		public override async void get_envp () throws GLib.Error;
		public override GLib.Icon? get_icon ();
		public override string get_location (ref bool as_root);
		public override string get_location_pretty ();
		public override bool is_native ();
		public override async bool is_ready (out string when);
	}
	[CCode (cheader_filename = "common.h")]
	public class BackendU1 : DejaDup.Backend {
		public BackendU1 ();
		public override DejaDup.Backend clone ();
		public static DejaDup.Checker get_checker ();
		public static GLib.DBusProxy get_creds_proxy () throws GLib.Error;
		public override async void get_envp () throws GLib.Error;
		public override GLib.Icon? get_icon ();
		public override string get_location (ref bool as_root);
		public override string get_location_pretty ();
		public static GLib.DBusProxy get_prefs_proxy () throws GLib.Error;
		public override async uint64 get_space (bool free = true);
		public override bool is_native ();
		public override async bool is_ready (out string when);
		public override bool space_can_be_infinite ();
	}
	[CCode (cheader_filename = "common.h")]
	public class Checker : GLib.Object {
		public Checker ();
		public bool available { get; protected set; }
		public bool complete { get; protected set; }
	}
	[CCode (cheader_filename = "common.h")]
	public class Network : GLib.Object {
		public Network ();
		public async bool can_reach (string url);
		public static async void ensure_status ();
		public static new DejaDup.Network @get ();
		public bool connected { get; set; }
	}
	[CCode (cheader_filename = "common.h")]
	public abstract class Operation : GLib.Object {
		public class State {
			public DejaDup.Backend backend;
			public string passphrase;
			public State ();
		}
		protected string passphrase;
		public Operation ();
		public void cancel ();
		protected async void chain_op (DejaDup.Operation subop, string desc, string? detail);
		protected virtual void connect_to_job ();
		public DejaDup.Operation.State get_state ();
		protected virtual GLib.List<string>? make_argv ();
		public static string mode_to_string (DejaDup.ToolJob.Mode mode);
		protected virtual void send_action_file_changed (GLib.File file, bool actual);
		public void set_passphrase (string? passphrase);
		public void set_state (DejaDup.Operation.State state);
		public virtual async void start (bool try_claim_bus = true);
		public void stop ();
		public DejaDup.Backend backend { get; private set; }
		public DejaDup.ToolJob.Mode mode { get; construct; }
		public bool needs_password { get; set; }
		public bool use_cached_password { get; protected set; }
		public bool use_progress { get; set; }
		public signal void action_desc_changed (string action);
		public signal void action_file_changed (GLib.File file, bool actual);
		public signal void done (bool success, bool cancelled, string? detail);
		public signal void is_full (bool first);
		public signal void passphrase_required ();
		public signal void progress (double percent);
		public signal void question (string title, string msg);
		public signal void raise_error (string errstr, string? detail);
	}
	[CCode (cheader_filename = "common.h")]
	public class OperationBackup : DejaDup.Operation {
		public OperationBackup ();
		protected override GLib.List<string>? make_argv ();
		protected void save_gsettings (string schema);
		protected override void send_action_file_changed (GLib.File file, bool actual);
	}
	[CCode (cheader_filename = "common.h")]
	public class OperationFiles : DejaDup.Operation {
		public OperationFiles (GLib.Time? time_in, GLib.File source);
		protected override void connect_to_job ();
		protected override GLib.List<string>? make_argv ();
		public GLib.File source { get; construct; }
		public GLib.Time time { get; set; }
		public signal void listed_current_files (string date, string file);
	}
	[CCode (cheader_filename = "common.h")]
	public class OperationRestore : DejaDup.Operation {
		public OperationRestore (string dest_in, string? time_in = null, GLib.List<GLib.File>? files_in = null);
		protected override GLib.List<string>? make_argv ();
		public void restore_gsettings ();
		public override async void start (bool try_claim_bus = true);
		public string dest { get; construct; }
		public GLib.List<GLib.File> restore_files { get; construct; }
		public string time { get; construct; }
	}
	[CCode (cheader_filename = "common.h")]
	public class OperationStatus : DejaDup.Operation {
		public OperationStatus ();
		protected override void connect_to_job ();
		public signal void collection_dates (GLib.List<string>? dates);
	}
	[CCode (cheader_filename = "common.h")]
	public class OperationVerify : DejaDup.Operation {
		public OperationVerify ();
		protected override void connect_to_job ();
		public override async void start (bool try_claim_bus = true);
	}
	[CCode (cheader_filename = "common.h")]
	public class RecursiveDelete : DejaDup.RecursiveOp {
		public RecursiveDelete (GLib.File source);
		protected override DejaDup.RecursiveOp clone_for_info (GLib.FileInfo info);
		protected override void finish_dir ();
		protected override void handle_file ();
	}
	[CCode (cheader_filename = "common.h")]
	public class RecursiveMove : DejaDup.RecursiveOp {
		public RecursiveMove (GLib.File source, GLib.File dest);
		protected override DejaDup.RecursiveOp clone_for_info (GLib.FileInfo info);
		protected override void finish_dir ();
		protected override void handle_dir ();
		protected override void handle_file ();
	}
	[CCode (cheader_filename = "common.h")]
	public abstract class RecursiveOp : GLib.Object {
		protected GLib.FileType dst_type;
		protected GLib.FileType src_type;
		public RecursiveOp ();
		protected abstract DejaDup.RecursiveOp clone_for_info (GLib.FileInfo info);
		protected virtual void finish_dir ();
		protected virtual void handle_dir ();
		protected virtual void handle_file ();
		public void start ();
		public async void start_async ();
		public GLib.File dst { get; construct; }
		public GLib.File src { get; construct; }
		public signal void done ();
		public signal void raise_error (GLib.File src, GLib.File dst, string errstr);
	}
	[CCode (cheader_filename = "common.h")]
	public class SimpleSettings : GLib.Settings {
		public SimpleSettings (string schema, bool ro);
		public new void apply ();
		public new void set_boolean (string k, bool v);
		public new void set_int (string k, int v);
		public new void set_string (string k, string v);
		public new void set_value (string k, GLib.Variant v);
		public bool read_only { get; set; }
	}
	[CCode (cheader_filename = "common.h")]
	public abstract class ToolJob : GLib.Object {
		public enum Flags {
			NO_PROGRESS,
			NO_CACHE
		}
		public enum Mode {
			INVALID,
			BACKUP,
			RESTORE,
			STATUS,
			LIST,
			HISTORY
		}
		protected GLib.List<GLib.File> _restore_files;
		public GLib.List<GLib.File> excludes;
		public GLib.List<GLib.File> includes;
		public ToolJob ();
		public abstract void cancel ();
		public abstract void pause (string? reason);
		public abstract void resume ();
		public abstract void start ();
		public abstract void stop ();
		public DejaDup.Backend backend { get; set; }
		public string encrypt_password { get; set; }
		public DejaDup.ToolJob.Flags flags { get; set; }
		public GLib.File local { get; set; }
		public DejaDup.ToolJob.Mode mode { get; set; }
		public GLib.List<GLib.File> restore_files { get; set; }
		public string time { get; set; }
		public signal void action_desc_changed (string action);
		public signal void action_file_changed (GLib.File file, bool actual);
		public signal void bad_encryption_password ();
		public signal void collection_dates (GLib.List<string>? dates);
		public signal void done (bool success, bool cancelled, string? detail);
		public signal void is_full (bool first);
		public signal void listed_current_files (string date, string file);
		public signal void progress (double percent);
		public signal void question (string title, string msg);
		public signal void raise_error (string errstr, string? detail);
	}
	[CCode (cheader_filename = "common.h")]
	public abstract class ToolPlugin : Peas.ExtensionBase, Peas.Activatable {
		public ToolPlugin ();
		public virtual void activate ();
		public abstract DejaDup.ToolJob create_job () throws GLib.Error;
		public virtual void deactivate ();
		public virtual void update_state ();
		public string name { get; protected set; }
	}
	[CCode (cheader_filename = "common.h")]
	public enum TimestampType {
		NONE,
		BACKUP,
		RESTORE
	}
	[CCode (cheader_filename = "common.h")]
	public errordomain BackupError {
		BAD_CONFIG,
		ALREADY_RUNNING
	}
	[CCode (cheader_filename = "common.h")]
	public const string APPS_LIST_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string APPS_ROOT;
	[CCode (cheader_filename = "common.h")]
	public const string BACKEND_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string BACKUP_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string DELETE_AFTER_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string EXCLUDE_LIST_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string FILE_ICON_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string FILE_NAME_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string FILE_PATH_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string FILE_RELPATH_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string FILE_ROOT;
	[CCode (cheader_filename = "common.h")]
	public const string FILE_SHORT_NAME_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string FILE_TYPE_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string FILE_UUID_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string FULL_BACKUP_PERIOD_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string INCLUDE_LIST_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string LAST_BACKUP_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string LAST_RESTORE_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string LAST_RUN_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string NAG_CHECK_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string PERIODIC_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string PERIODIC_PERIOD_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string PROMPT_CHECK_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string RACKSPACE_CONTAINER_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string RACKSPACE_ROOT;
	[CCode (cheader_filename = "common.h")]
	public const string RACKSPACE_USERNAME_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string ROOT_PROMPT_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string S3_BUCKET_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string S3_FOLDER_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string S3_ID_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string S3_ROOT;
	[CCode (cheader_filename = "common.h")]
	public const string U1_FOLDER_KEY;
	[CCode (cheader_filename = "common.h")]
	public const string U1_ROOT;
	[CCode (cheader_filename = "common.h")]
	public const string WELCOMED_KEY;
	[CCode (cheader_filename = "common.h")]
	public static DejaDup.SimpleSettings get_app_settings (string ske, string? subdir = null);
	[CCode (cheader_filename = "common.h")]
	public static GLib.TimeSpan get_day ();
	[CCode (cheader_filename = "common.h")]
	public static string get_display_name (GLib.File f);
	[CCode (cheader_filename = "common.h")]
	public static string get_file_desc (GLib.File file);
	[CCode (cheader_filename = "common.h")]
	public static string get_folder_key (DejaDup.SimpleSettings settings, string key);
	[CCode (cheader_filename = "common.h")]
	public static int get_full_backup_threshold ();
	[CCode (cheader_filename = "common.h")]
	public static GLib.Date get_full_backup_threshold_date ();
	[CCode (cheader_filename = "common.h")]
	public static int get_nag_delay ();
	[CCode (cheader_filename = "common.h")]
	public static async string get_nickname (GLib.File f);
	[CCode (cheader_filename = "common.h")]
	public static int get_prompt_delay ();
	[CCode (cheader_filename = "common.h")]
	public static DejaDup.SimpleSettings get_settings (string? subdir = null);
	[CCode (cheader_filename = "common.h")]
	public static string get_trash_path ();
	[CCode (cheader_filename = "common.h")]
	public static bool has_seen_settings ();
	[CCode (cheader_filename = "common.h")]
	public static void i18n_setup ();
	[CCode (cheader_filename = "common.h")]
	public static bool in_testing_mode ();
	[CCode (cheader_filename = "common.h")]
	public static bool initialize (out string header, out string msg);
	[CCode (cheader_filename = "common.h")]
	public static bool is_nag_time ();
	[CCode (cheader_filename = "common.h")]
	public static string last_run_date (DejaDup.TimestampType type);
	[CCode (cheader_filename = "common.h")]
	public static void make_prompt_check ();
	[CCode (cheader_filename = "common.h")]
	public static DejaDup.ToolJob make_tool_job () throws GLib.Error;
	[CCode (cheader_filename = "common.h")]
	public static GLib.DateTime? next_run_date ();
	[CCode (cheader_filename = "common.h")]
	public static GLib.File? parse_dir (string dir);
	[CCode (cheader_filename = "common.h")]
	public static GLib.File[] parse_dir_list (string*[] dirs);
	[CCode (cheader_filename = "common.h")]
	public static void run_deja_dup (string args, GLib.AppLaunchContext? ctx = null, GLib.List<GLib.File>? files = null);
	[CCode (cheader_filename = "common.h")]
	public static void set_settings_read_only (bool ro);
	[CCode (cheader_filename = "common.h")]
	public static void update_last_run_timestamp (DejaDup.TimestampType type);
	[CCode (cheader_filename = "common.h")]
	public static void update_nag_time (bool cancel = false);
	[CCode (cheader_filename = "common.h")]
	public static void update_prompt_time (bool cancel = false);
}
